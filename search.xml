<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SSH2(Struts2,Spring4,Hibernate5)整合的意义及其精髓]]></title>
      <url>http://GitHubSupervise.io/blog/2017/04/16/sshIntegration/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ssh三大框架整合的意义及其精髓"><a href="#ssh三大框架整合的意义及其精髓" class="headerlink" title="ssh三大框架整合的意义及其精髓"></a>ssh三大框架整合的意义及其精髓</h2><h3 id="hibernate工作原理"><a href="#hibernate工作原理" class="headerlink" title="hibernate工作原理"></a>hibernate工作原理</h3><ul>
<li>原理：<ul>
<li>读取并解析配置文件</li>
<li>读取并解析映射信息，创建<code>SessionFactory</code></li>
<li>打开<code>Sesssion</code></li>
<li>创建事务<code>Transation</code></li>
<li>持久化操作</li>
<li>提交事务</li>
<li>关闭<code>Session</code></li>
<li>关闭<code>SesstionFactory</code></li>
</ul>
</li>
</ul>
<h4 id="为什么要用："><a href="#为什么要用：" class="headerlink" title="为什么要用："></a>为什么要用：</h4><ul>
<li>对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。</li>
<li>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作</li>
<li>hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。</li>
<li>hibernate的性能还可以，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。</li>
</ul>
<h4 id="Hibernate是如何延迟加载"><a href="#Hibernate是如何延迟加载" class="headerlink" title="Hibernate是如何延迟加载?"></a>Hibernate是如何延迟加载?</h4><ul>
<li>Hibernate2延迟加载实现：<ul>
<li>实体对象</li>
<li>集合（Collection）</li>
</ul>
</li>
<li>Hibernate3 提供了属性的延迟加载功能</li>
<li>当Hibernate在查询数据的时候，数据并没有存在与内存中，当程序真正对数据的操作时，对象才存在与内存中，就实现了延迟加载，他节省了服务器的内存开销，从而提高了服务器的性能。</li>
</ul>
<h4 id="Hibernate中怎样实现类之间的关系-如：一对多、多对多的关系"><a href="#Hibernate中怎样实现类之间的关系-如：一对多、多对多的关系" class="headerlink" title="Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系)"></a>Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系)</h4><ul>
<li>类与类之间的关系主要体现在表与表之间的关系进行操作，它们都是对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的many-to-one、one-to-many、many-to-many。</li>
</ul>
<h4 id="Hibernate的缓存机制"><a href="#Hibernate的缓存机制" class="headerlink" title="Hibernate的缓存机制"></a>Hibernate的缓存机制</h4><ul>
<li>内部缓存存在Hibernate中又叫一级缓存，属于应用事物级缓存 </li>
<li>二级缓存：<ul>
<li>应用及缓存</li>
<li>分布式缓存</li>
<li>条件：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非关键数据</li>
<li>第三方缓存的实现<h4 id="Hibernate的查询方式-Sql、Criteria-object-comptosition"><a href="#Hibernate的查询方式-Sql、Criteria-object-comptosition" class="headerlink" title="Hibernate的查询方式 Sql、Criteria,object comptosition"></a>Hibernate的查询方式 Sql、Criteria,object comptosition</h4></li>
</ul>
</li>
<li>Hql：<ul>
<li>属性查询</li>
<li>参数查询、命名参数查询</li>
<li>关联查询</li>
<li>分页查询</li>
<li>统计函数<h4 id="如何优化Hibernate？"><a href="#如何优化Hibernate？" class="headerlink" title="如何优化Hibernate？"></a>如何优化Hibernate？</h4></li>
</ul>
</li>
<li>使用双向一对多关联，不使用单向一对多</li>
<li>灵活使用单向一对多关联</li>
<li>不用一对一，用多对一取代</li>
<li>配置对象缓存，不使用集合缓存</li>
<li>一对多集合使用Bag,多对多集合使用Set</li>
<li>继承类使用显式多态</li>
<li>表字段要少，表关联不要怕多，有二级缓存撑腰  <h3 id="Struts工作原理"><a href="#Struts工作原理" class="headerlink" title="Struts工作原理"></a>Struts工作原理</h3><h4 id="Struts工作机制？"><a href="#Struts工作机制？" class="headerlink" title="Struts工作机制？"></a>Struts工作机制？</h4></li>
<li><p>工作机制：</p>
<ul>
<li>Struts的工作流程:<ul>
<li>在web应用启动时就会加载初始化<code>ActionServlet</code>,<code>ActionServlet</code>从<br><code>struts-config.xml</code>文件中读取配置信息,把它们存放到各种配置对象<br>当<code>ActionServlet</code>接收到一个客户请求时,将执行如下流程.<ul>
<li>检索和用户请求匹配的<code>ActionMapping</code>实例,如果不存在,就返回请求路径无效信息; </li>
<li>如果<code>ActionForm</code>实例不存在,就创建一个<code>ActionForm</code>对象,把客户提交的表单数据保存到<code>ActionForm</code>对象中; </li>
<li>根据配置信息决定是否需要表单验证.如果需要验证,就调用<code>ActionForm</code>的v<code>alidate()方法</code>; </li>
<li>如果<code>ActionForm</code>的<code>validate()方法</code>返回null或返回一个不包含<code>ActionMessage</code>的<code>ActuibErrors</code>对象, 就表示表单验证成功; </li>
<li><code>ActionServlet</code>根据<code>ActionMapping</code>所包含的映射信息决定将请求转发给哪个<code>Action</code>,如果相应的<code>Action</code>实例不存在,就先创建这个实例,然后调用<code>Action的execute()方法</code>; </li>
<li><code>Action的execute()方法</code>返回一个<code>ActionForward</code>对象,<code>ActionServlet</code>在把客户请求转发给<code>ActionForward</code>对象指向的JSP组件; </li>
<li><code>ActionForward</code>对象指向<code>JSP</code>组件生成动态网页,返回给客户;<h4 id="为什么要用：-1"><a href="#为什么要用：-1" class="headerlink" title="为什么要用："></a>为什么要用：</h4></li>
</ul>
</li>
<li>JSP、Servlet、JavaBean技术的出现给我们构建强大的企业应用系统提供了可能。但用这些技术构建的系统非常的繁乱，所以在此之上，我们需要一个规则、一个把这些技术组织起来的规则，这就是框架，Struts便应运而生。</li>
<li>基于Struts开发的应用由3类组件构成：控制器组件、模型组件、视图组件<h4 id="Struts的validate框架是如何验证的？"><a href="#Struts的validate框架是如何验证的？" class="headerlink" title="Struts的validate框架是如何验证的？"></a>Struts的validate框架是如何验证的？</h4></li>
<li>在struts配置文件中配置具体的错误提示，再在<code>FormBean</code>中的<code>validate()</code>方法具体调用<h4 id="Struts的架构"><a href="#Struts的架构" class="headerlink" title="Struts的架构"></a>Struts的架构</h4></li>
<li>MVC模式: web应用程序启动时就会加载并初始化<code>ActionServler</code>。用户提交表单时，一个配置好的<code>ActionForm</code>对象被创建，并被填入表单相应的数据，<code>ActionServler</code>根据<code>Struts-config.xml</code>文件配置好的设置决定是否需要表单验证，如果需要就调用<code>ActionForm</code>的<code>Validate()</code>验证后选择将请求发送到哪个<code>Action</code>，如果<code>Action</code>不存在，<code>ActionServlet</code>会先创建这个对象，然后调用 <code>Action的execute()方法</code>。<code>Execute()</code>从<code>ActionForm</code>对象中获取数据，完成业务逻辑，返回一个<code>ActionForward</code>对象，<code>ActionServlet</code>再把客户请求转发给<code>ActionForward</code>对象指定的jsp组件，<code>ActionForward</code>对象指定的jsp生成动态的网页，返回给客户<h3 id="spring工作原理"><a href="#spring工作原理" class="headerlink" title="spring工作原理"></a>spring工作原理</h3></li>
<li>spring mvc请所有的请求都提交给<code>DispatcherServlet</code>,它会委托应用系统的其他模块负责负责对请求进行真正的处理工作。</li>
<li>DispatcherServlet查询一个或多个<code>HandlerMapping</code>,找到处理请求的<code>Controller</code>.</li>
<li>DispatcherServlet请请求提交到目标<code>Controller</code></li>
<li>Controller进行业务逻辑处理后，会返回一个<code>ModelAndView</code></li>
<li>Dispathcher查询一个或多个<code>ViewResolver</code>视图解析器,找到ModelAndView对象指定的视图对象</li>
<li>视图对象负责渲染返回给客户端。<h4 id="为什么用："><a href="#为什么用：" class="headerlink" title="为什么用："></a>为什么用：</h4></li>
<li>AOP 让开发人员可以创建非行为性的关注点，称为横切关注点，并将它们插入到应用程序代码中。使用 AOP 后，公共服务 （比如日志、持久性、事务等）就可以分解成方面并应用到域对象上，同时不会增加域对象的对象模型的复杂性。</li>
<li>IOC 允许创建一个可以构造对象的应用环境，然后向这些对象传递它们的协作对象。正如单词 倒置 所表明的，IOC 就像反 过来的 JNDI。没有使用一堆抽象工厂、服务定位器、单元素（singleton）和直接构造（straight construction），每一个对象都是用其协作对象构造的。因此是由容器管理协作对象（collaborator）。<br>Spring即使一个AOP框架，也是一IOC容器。 Spring 最好的地方是它有助于您替换对象。有了 Spring，只要用 JavaBean 属性和配置文件加入依赖性（协作对象）。然后可以很容易地在需要时替换具有类似接口的协作对象。  <h4 id="Spring-框架是一个分层架构，由7个定义良好的模块组成。"><a href="#Spring-框架是一个分层架构，由7个定义良好的模块组成。" class="headerlink" title="Spring 框架是一个分层架构，由7个定义良好的模块组成。"></a>Spring 框架是一个分层架构，由7个定义良好的模块组成。</h4></li>
<li>Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式</li>
<li><img src="/img/Spring.jpg" alt="Spring7大模块"> </li>
<li>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</li>
</ul>
</li>
<li><code>核心容器</code>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是<code>BeanFactory</code>，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><code>Spring 上下文</code>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><code>Spring AOP</code>：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><code>Spring DAO</code>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><code>Spring ORM</code>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><code>Spring Web模块</code>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><code>Spring MVC框架</code>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
<li>Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同 J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。<br>####IOC 和 AOP<ul>
<li>控制反转的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器（在 Spring 框架中是 IOC 容器） 负责将这些联系在一起。</li>
<li>它是依赖倒置原则的一种实现思想。<br>依赖倒置原则很好的解决了高层和低层之间的直接依赖，解决了<br>层与层之间的耦合度问题。但是，并没有解决对象的管理和装备的责任。意思也就是，所有对象的创建以及管理都必须在程序中完成。因此，当更换模块对象的时候，还是要修改原有的代码，这样又违反了开闭原则。<br>那么，控制反转的思想，就是将这些对象的创建管理以及装配等工作直接从程序中移除出来，交由给一个第三方的管理者去负责，这样就是将对象的控制权转移到了第三方的身上，这个过程就称之为控制反转。在控制反转中，都会有一个第三方的容器去管理和存储这些对象，这个容器就叫做IOC容器。<ul>
<li>IOC容器可以提供两种实现供客户端使用：<ul>
<li><code>依赖查找</code>，也就是客户端主动的从容器中去查找需要的对象。（根据bean Id）由应用程序负责到容器中查找所需要依赖的资源或对象，例如JAVA中的JNDI（Java naming Directory Interface）</li>
<li><code>依赖注入</code>，正好和以来查找相反，客户端所需的对象不需要自己去容器中查找，而是由容器自动的把这个对象注入到客户端中。（容器工厂赋值到程序中）<ul>
<li><code>作用</code>：由容器完成对对象之间依赖装配</li>
<li><code>装配</code>（属性、get方法、 构造方法）</li>
</ul>
</li>
</ul>
</li>
<li>（好莱坞原则，“你不要来找我，我会来找你”）<ul>
<li>例子：吃饭，之前要自己做，后来 别人做好饭且喂到你嘴里         </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在典型的 IOC 场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时间调用方法。下表列出了 IOC 的一个实现模式。</p>
<ul>
<li><img src="/img/Ioc.jpg" alt="IOC"> </li>
</ul>
</li>
</ul>
<iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Struts </tag>
            
            <tag> Spring </tag>
            
            <tag> Hibernate </tag>
            
            <tag> IOC </tag>
            
            <tag> AOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何优雅的写一个Java MVC框架]]></title>
      <url>http://GitHubSupervise.io/blog/2017/04/16/MVC/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>待更新</li>
</ul>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> MVC </tag>
            
            <tag> 框架 </tag>
            
            <tag> 优雅 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java高并发秒杀系统API]]></title>
      <url>http://GitHubSupervise.io/blog/2017/04/16/javaHighConcurrencyOne/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>待更新</li>
</ul>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 秒杀系统 </tag>
            
            <tag> 交互 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《番茄工作法图解》思维导图读书笔记分享]]></title>
      <url>http://GitHubSupervise.io/blog/2017/04/05/Execution_of_work/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>所谓番茄工作法，一句话概括就是：工作25分钟，休息5分钟。目的是保持注意力和高效的工作状态。我们有时候做一件事规定自己限时完成，也是这个道理。</li>
<li>下面是思维导图：<code>（建议保存到本地查看）</code><ul>
<li><img src="/img/potato.png" alt="思维导图"></li>
</ul>
</li>
<li>思维导图笔记作者：<a href="http://www.weibo.com/fisher205" target="_blank" rel="external">http://www.weibo.com/fisher205</a><iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>

</li>
</ul>]]></content>
      
        <categories>
            
            <category> 思维导图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 工作法 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非常完整的Chrome浏览器客户端调试大全]]></title>
      <url>http://GitHubSupervise.io/blog/2017/04/01/Chrome/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>“工欲善其事，必先利其器” </p>
</blockquote>
<h2 id="先来认识一下这些按钮"><a href="#先来认识一下这些按钮" class="headerlink" title="先来认识一下这些按钮"></a>先来认识一下这些按钮</h2><ul>
<li><img src="/img/Chrome/1.png" alt="按钮"></li>
<li><p>先来看这张图最上头的一行是一个功能菜单，每一个菜单都有它相应的功能和使用方法，依次从左往右来看</p>
<ul>
<li><code>1.箭头按钮：</code>用于在页面选择一个元素来审查和查看它的相关信息，当我们在Elements这个按钮页面下点击某个Dom元素时，箭头按钮会变成选择状态</li>
<li><code>2.设备图标：</code>点击它可以切换到不同的终端进行开发模式，移动端和pc端的一个切换，可以选择不同的移动终端设备，同时可以选择不同的尺寸比例，chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择,可选择的适配 <ul>
<li><img src="/img/Chrome/2.png" alt="按钮"></li>
</ul>
</li>
<li><code>3.Elements 功能标签页：</code>用来查看，修改页面上的元素，包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息，下图我们可以看到当我鼠标选择id 为lg_tar的div元素时，右侧的css样式对应的会展示出此id 的样式信息，此时可以在右侧进行一个修改，修改即可在页面上生效， 灰色的element.style样式同样可以进行添加和书写，唯一的区别是，在这里添加的样式是添加到了该元素内部，实现方式即：该div元素的style属性，这个页面的功能很强大，在我们做了相关的页面后，修改样式是一块很重要的工作，细微的差距都需要调整，但是不可能说做到每修改一点即编译一遍代码，再刷新浏览器查看效果，这样很低效，一次性在浏览器中修改之后，再到代码中进行修改<ul>
<li><img src="/img/Chrome/3.png" alt="按钮"><ul>
<li>对应的样式</li>
</ul>
</li>
<li><img src="/img/Chrome/4.png" alt="按钮"><ul>
<li>盒模型信息</li>
<li>同时，当我们浏览网站看到某些特别炫酷的效果和难做的样式时候，打开这个功能，我们即可看到别人是如何实现的，学会它这知识就是你的了，仔细钻研也会有意想不到的收获</li>
</ul>
</li>
</ul>
</li>
<li><p><code>4.Console控制台：</code>用于打印和输出相关的命令信息，其实console控制台除了我们熟知的报错，打印console.log信息外，还有很多相关的功能，下面简单介绍几个：</p>
<ul>
<li>a: 一些对页面数据的指令操作，比如打断点正好执行到获取的数据上，由于数据都是层层嵌套的对象，这个时候查看里面的key/value不是很方便，即可用这个指令开查看，obj的json string 格式的key/value，我们对于数据里面有哪些字段和属性即可一目了然<ul>
<li><img src="/img/Chrome/5.png" alt="按钮"></li>
</ul>
</li>
<li>其他功能</li>
<li>b: 除了console.log还有其他相关的指令可用  <ul>
<li><img src="/img/Chrome/6.png" alt="按钮"></li>
</ul>
</li>
<li>console也有相关的API</li>
</ul>
</li>
<li><p><code>5.Sources js资源页面：</code>这个页面内我们可以找到当然浏览器页面中的js 源文件，方便我们查看和调试，在我还没有走出校园时候，我经常看一些大站的js代码，那时候其实基本都看不懂，但是最起码可以看看人家的代码风格，人家的命名方式，所有的代码都是压缩之后的代码，我们可以点击下面的{}大括号按钮将代码转成可读格式</p>
<ul>
<li>Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets<ul>
<li><img src="/img/Chrome/7.png" alt="按钮"></li>
</ul>
</li>
<li>对应的源代码 <ul>
<li><img src="/img/Chrome/8.png" alt="按钮"></li>
</ul>
</li>
<li>格式化后的代码<ul>
<li>关于打断点调试的内容，下面介绍，先来说一些，其他平时基本没人用但是很有用的小点，比如当我们想不起某个方法的具体使用时候，会打开控制台随意写一些测试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码，所以推荐使用Sources下面的左侧的Sinppets代码片段按钮，这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息（新建了一个名叫：app.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法）</li>
<li><img src="/img/Chrome/9.png" alt="按钮"></li>
</ul>
</li>
<li>自己书写的片段<ul>
<li>Content scripts 是 Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，但是几乎我们的项目还没有相关的扩展文件，所以啥也看不到，平时也不需要关心这块</li>
<li><img src="/img/Chrome/10.png" alt="按钮"></li>
<li>无结果</li>
</ul>
</li>
</ul>
</li>
<li><code>6.Network 网络请求标签页：</code>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看<ul>
<li><img src="/img/Chrome/11.png" alt="按钮"></li>
<li>所有的资源</li>
<li>以上我选择了All，就会把该页面所有资源文件请求下来，如果只选择XHR 异步请求资源，则我们可以分析相关的请求信息</li>
<li><img src="/img/Chrome/12.png" alt="按钮"></li>
<li>请求的相关信息</li>
<li>打开一个Ajax异步请求，可以看到它的请求头信息，是一个POST请求，参数有哪些，还可以预览它的返回的结果数据，这些数据的使用和查看有利于我们很好的和后端工程师们联调数据，也方便我们前端更直观的分析数据</li>
<li><img src="/img/Chrome/13.png" alt="按钮"></li>
<li>预览请求的数据</li>
</ul>
</li>
<li><code>7.Timeline</code>标签页可以显示JS执行时间、页面元素渲染时间，不做过多介绍</li>
<li><code>8.Profiles</code>标签页可以查看CPU执行时间与内存占用，不做过多介绍</li>
<li><code>9.Resources</code>标签页会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍</li>
<li><code>10.Security</code>标签页可以告诉你这个网站的安全性，查看有效的证书等</li>
<li><code>11.Audits</code>标签页可以帮你分析页面性能，有助于优化前端页面，分析后得到的报告<ul>
<li><img src="/img/Chrome/14.png" alt="按钮"></li>
<li>分析结果<h2 id="Sources资源页面的断点调试"><a href="#Sources资源页面的断点调试" class="headerlink" title="Sources资源页面的断点调试"></a>Sources资源页面的断点调试</h2></li>
</ul>
</li>
<li><code>1.如何调试：</code><ul>
<li>调试js代码，肯定是我们常用的功能，那么如何打断点，找到要调试的文件，然后在内容源代码左侧的代码标记行处点击即可打上一个断点</li>
<li><img src="/img/Chrome/15.png" alt="调试"></li>
</ul>
</li>
<li><code>2.断点与 js代码修改</code><ul>
<li>看下面这张图，我在一个名为toggleTab的方法下打了两个断点，当开始执行我们的点击切换tab行为后，代码会在执行的断点出停下来，并把相关的数据展示一部分，此时可以在已经执行过得代码处，把鼠标放上去，即可查看相关的具体数据信息，同时我们可以使用右侧的功能键进行调试，右侧最上面一排分别是：暂停/继续、单步执行(F10快捷键)、单步跳入此执行块(F11快捷键)、单步跳出此执行块、禁用/启用所有断点。下面是各种具体的功能区</li>
<li><img src="/img/Chrome/16.png" alt="断点"><ul>
<li>在代码中打断点</li>
<li>在当前的代码执行区域，在调试中如果发现需要修改的地方，也是可以立即修改的，修改后保存即可生效，这样就免去了再到代码中去书写，再刷新回看了</li>
<li><img src="/img/Chrome/17.png" alt="断点"></li>
<li>临时修改</li>
</ul>
</li>
</ul>
</li>
<li><code>3.快速进入调试的方法</code> <ul>
<li>当我们的代码执行到某个程序块方法处，这个方法上可能你并没有设置相关的断点，此时你可以F11进入此程序块，但是往往我们的项目都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个函数块，此时将鼠标放在此函数上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个函数，然后临时打上断点，按F10或者点击右上角的第二个按钮即可直接进入此函数的断点处</li>
<li><img src="/img/Chrome/18.png" alt="快速调试"></li>
</ul>
</li>
<li><code>4.调试的功能区域</code> <ul>
<li>每一个功能区，都有它相关的左右，先来看一张图，它都有哪些功能</li>
<li><img src="/img/Chrome/19.png" alt="功能区域"><ul>
<li>Call Stack调用栈：当断点执行到某一程序块处停下来后，右侧调试区的 Call Stack 会显示当前断点所处的方法调用栈，从上到下由最新调用处依次往下排列，Call Stack 列表的下方是Scope Variables列表可以查看此时局部变量和全局变量的值。图中可以看出，我们最先走了toggleTab这个方法，然后走到了一个更新对象的方法上，当前调用在哪里，箭头会帮你指向哪里，同时我们可以点击，调用栈列表上的任意一处，即可回头再去看看代码</li>
<li><img src="/img/Chrome/20.png" alt="调用栈"></li>
<li>但是若你想从新从某个调用方法出执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，Scope 中的变量值也会依据代码从新更改，这样就可以回退来从新调试，错过的调试也可以回过头来反复查看</li>
<li><img src="/img/Chrome/21.png" alt="调用方法"></li>
<li>Breakpoints关于断点：所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉/加上”此处断点，也可以点击下方的代码表达式，调到相应的程序代码处，来查看</li>
<li><img src="/img/Chrome/22.png" alt="关于断点"></li>
<li>XHR Breakpoints</li>
<li>在XHR Breakpoints处，点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</li>
<li><img src="/img/Chrome/23.png" alt="XHR"></li>
<li>DOM Breakpoints:</li>
<li>可以给你的DOM元素设置断点，有时候真的需要监听和查看某个元素的变化情况，赋值情况，但是我们并是不太关心哪一段代码对它做的修改，只想看看它的变化情况，那么可以给它来个监听事件，这个时候DOM Breakpoints中会如图</li>
<li><img src="/img/Chrome/24.png" alt="DOM"></li>
<li>当要给DOM添加断点的时候，会出现选择项分别是如下三种修改1.子节点修改2.自身属性修改3.自身节点被删除。选中之后，Sources Panel 中右侧的 DOM Breakpoints 列表中就会出现该 DOM 断点。一旦执行到要对该 DOM 做相应修改时，代码就会在那里停下来</li>
<li>Event listener Breakpoints </li>
<li>最后Event Listener 列表，这里列出了各种可能的事件类型。勾选对应的事件类型，当触发了该类型的事件的 JavaScript 代码时就会自动中断<h2 id="Postman你值得拥有的网络请求神器"><a href="#Postman你值得拥有的网络请求神器" class="headerlink" title="Postman你值得拥有的网络请求神器"></a>Postman你值得拥有的网络请求神器</h2></li>
</ul>
</li>
</ul>
</li>
<li>在我们的开发过程中，后端的接口都是由发起AJAX请求而获取到的相关数据，但是很多情况是我们的业务还没有做到那块时，后端的同学接口都已经准备好了，但是为了便于后期的工作，将接口请求的数据模拟访问，然后对接口联调很重要，也很方便，因为我们不可能把每个请求代码都写到文件里编译好了再去浏览器内查看，这时候可以安装一个post man网络请求插件，在谷歌应用商店下载，需要翻墙<ul>
<li><img src="/img/Chrome/25.png" alt="Postman"></li>
</ul>
</li>
<li>该扩展程序使用非常简单，功能同时也非常强大，输入你的请求，选择好请求的method，需要请求参数的挨个填好，send之后，就可以看到返回的数据，这个小工具很利于我们的开发<ul>
<li><img src="/img/Chrome/26.png" alt="Postman"></li>
</ul>
</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul>
<li>写到这里这篇总结就结束了，也许有很多写的不到位的地方，也有一些专业用词不严谨的地方，希望看到的读者可以和我一起交流，我也非常乐意我的总结可以给 刚刚学会编程需要调试的同学受用，再此之前我一直在寻找一篇从头到尾的调试教学文章，我一直没有找到，要么是一点点的片段讲解，要么是专讲js断点调试，所以索性后来就直接看了 Chrome Developer Tools 的英文官方文档，并结合自己的一些小使用心得总结出此文，希望受到指点和修正 也希望可以帮助一些同学~<iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>






</li>
</ul>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> Chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> 客户端 </tag>
            
            <tag> 调试 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
